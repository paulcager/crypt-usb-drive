#!/bin/bash 

set -e -o pipefail

dd() {
	/usr/bin/dd 2>/dev/null "$@"
}

# Minimum number of blocks mkfs.fat will accept is 68 (to give FAT12)
BLOCKS=68

# Create blank 128-byte keyfile.
dd if=/dev/zero bs=128 count=1 >key.txt

# The minimum FAT12 filesystem size if 68 blocks.
dd if=/dev/zero of=fatfs bs=512 count=${BLOCKS}
mkfs.fat -n KEYDISK -S 512 -f 1 -r 16 -m /dev/null fatfs >/dev/null 2>&1

mkdir -p fat
sudo umount "${PWD}"/fat 2>/dev/null || true
sudo mount "${PWD}"/fatfs "${PWD}"/fat
sudo cp key.txt fat/
#sudo /usr/bin/dd if=/dev/random count=1 bs=256 of=fat/rand.bin 2>/dev/null
sudo umount "${PWD}"/fat
rmdir fat

cat >src/image.h <<'EOF'
//
// This file is automatically generated - do not edit.
//

#include <stdio.h>

#define BLOCK_SIZE 512
#define NUM_BLOCKS 68

// The first 3 blocks will be boot block, FAT and root directory.
#define DISK_HEADER_BLOCKS 3
extern uint8_t disk_blocks[DISK_HEADER_BLOCKS][BLOCK_SIZE];

// key.txt's data will be stored in block 7.
#define FILE_CONTENTS_BLOCK 7
// Load the key file starting at offset FILE_CONTENTS_BLOCK_OFFSET. The
// initial portion of the file will be generated.
#define FILE_CONTENTS_BLOCK_OFFSET (4+FILE_PREFIX_LEN)

extern uint8_t file_contents[BLOCK_SIZE];
EOF

cat >src/image.c <<EOF
//
// This file is automatically generated - do not edit.
//

#include <stdio.h>
#include <image.h>

uint8_t disk_blocks[DISK_HEADER_BLOCKS][BLOCK_SIZE] = {
{
$(dd if=fatfs bs=512 skip=0 count=1 | xxd -i)
},
{
$(dd if=fatfs bs=512 skip=1 count=1 | xxd -i)
},
{
$(dd if=fatfs bs=512 skip=2 count=1 | xxd -i)
},
};

uint8_t file_contents[BLOCK_SIZE] = "";
EOF
